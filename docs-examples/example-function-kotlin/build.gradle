import io.micronaut.gradle.docker.DockerBuildStrategy

plugins {
    id "io.micronaut.application"
    id("org.jetbrains.kotlin.jvm") version "1.5.31"
    id("org.jetbrains.kotlin.kapt") version "1.5.31"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.5.31"
}

dependencies {
    implementation project(":oraclecloud-sdk")
    implementation project(":oraclecloud-function")
    implementation "com.oracle.oci.sdk:oci-java-sdk-objectstorage", {
        exclude module: 'javassist'
    }
    implementation "io.micronaut.kotlin:micronaut-kotlin-runtime"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-validation"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
    runtimeOnly "com.fnproject.fn:runtime:$fnVersion"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin"
    testImplementation 'com.fnproject.fn:testing-junit4:1.0.133'
    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
}

testNativeImage.enabled=false

application.mainClass.set 'com.fnproject.fn.runtime.EntryPoint'

nativeImage {
    args("--static",
         "-Dfn.handler=example.ListBucketsFunction::handleRequest",
         "--initialize-at-build-time=example")
}

dockerfileNative {
    args("-XX:MaximumHeapSizePercent=80")
    buildStrategy.set(DockerBuildStrategy.ORACLE_FUNCTION)
    defaultCommand.set("example.ListBucketsFunction::handleRequest")
}

dockerfile {
    buildStrategy.set(DockerBuildStrategy.ORACLE_FUNCTION)
    defaultCommand.set("example.ListBucketsFunction::handleRequest")
}

dockerBuild {
    images = ["[REGION].ocir.io/[TENANCY]/[REPO]/$project.name:$project.version"]
}

dockerBuildNative {
    images = ["[REGION].ocir.io/[TENANCY]/[REPO]/$project.name-native:$project.version"]
}

run {
    args("example.ListBucketsFunction::handleRequest")
}
