import org.gradle.api.attributes.java.TargetJvmEnvironment

def proto = Attribute.of("protobuf-compatble", Boolean)

// What we are going to publish is not the usual jar
// But a jar which is stripped down to only contain
// metadata. As a consequence, we use a custom publication
// instead of the normal one, so that we are in control
// of which dependencies it includes.

plugins.withId('maven-publish') {
    AdhocComponentWithVariants javaComponent = components["java"]
    ["apiElements", "runtimeElements"].each {
        javaComponent.withVariantsFromConfiguration(configurations.findByName(it)) {
            skip()
        }
    }

    def metadata = configurations.create("metadataElements") {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            // Not sure why this attribute is missing, even when using afterEvaluate...
            attribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, objects.named(TargetJvmEnvironment, TargetJvmEnvironment.STANDARD_JVM))
            def runtimeElements = configurations.findByName('runtimeElements')
            runtimeElements.attributes.keySet().each { attr ->
                if (attr != proto) {
                    attributeProvider(attr, providers.provider { runtimeElements.attributes.getAttribute(attr) })
                }
            }

        }
    }
    javaComponent.addVariantsFromConfiguration(metadata) {

    }
}

// Since Gradle 8.3, the metadataElements configuration is preferred over
// the apiElements configuration when building the project. As a workaround, we
// introduce an extra attribute.

def internalCompile = Attribute.of("internal.compile", Boolean)
['apiElements', 'compileClasspath'].each {
    configurations.getByName(it).attributes {
        attribute(internalCompile, true)
    }
}

// Workaround for variant selection problem

configurations.all {
    if (canBeConsumed) {
        attributes.attribute(proto, name == 'runtimeElements')
    } else if (name == 'compileProtoPath') {
        attributes.attribute(proto, Boolean.TRUE)
    }
}

dependencies {
    metadataElements projects.micronautOraclecloudHttpclientNetty
}
