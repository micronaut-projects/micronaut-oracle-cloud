import groovy.xml.XmlSlurper

ExtraPropertiesExtension extraPropertiesExtension = gradle.ext

static Collection<String> parseOciBomArtifacts(String version) {
    final def CENTRAL_REPO_URL = "https://repo.maven.apache.org/maven2"
    def ociBom = new XmlSlurper().parse("${CENTRAL_REPO_URL}/com/oracle/oci/sdk/oci-java-sdk-bom/${version}/oci-java-sdk-bom-${version}.pom")
    return ociBom.dependencyManagement.dependencies.dependency.artifactId*.text()
}

static Collection<File> parseOciSdkModules() {
    var modules = new File("checkouts/oci-java-sdk").listFiles().findAll {it.name.startsWith("bmc-")}
    var secondLevelModules = modules.collectMany {
        it.listFiles().findAll{ it.name.startsWith("bmc-") }
    }
    return (modules + secondLevelModules)
            .findAll {new File(it.path + "/src/main/java").exists() }
}

static Collection<String> parseOciSdkClientClassNames() {
    return parseOciSdkModules()
        .collect{ new File(it.path + "/src/main/java/com/oracle/bmc") }
        .findAll{ it.exists() }
        // Get all the packages com/oracle/bmc/*
        .collectMany{List.of(it.listFiles()) }
        // Get all the files com/oracle/bmc/package/*Client.java
        .collectMany {
            var packageName = "com.oracle.bmc.$it.name."
            it.list()
                .findAll(name -> name.endsWith("Client.java"))
                .collect(name -> packageName + (name - ".java"))
        }
}

if (!extraPropertiesExtension.has('ociArtifacts')) {
    String ociVersion = libs.oci.bom.get().version
    def ociArtifacts = parseOciBomArtifacts(ociVersion)
            .stream().filter(artifact -> artifact != "oci-java-sdk-shaded-full").toList()

    String ociProjectVersion = new XmlSlurper().parse("checkouts/oci-java-sdk/bmc-bom/pom.xml").version.text()
    def ociProjectArtifacts = parseOciBomArtifacts(ociProjectVersion)

    if (ociVersion != ociProjectVersion) {
        logger.error("The version of checked out from github repository oci java sdk (${ociProjectVersion}) " +
                    "does not match the one in the bom (${ociVersion}). Either change the repository URL in " +
                    "gradle settings or the OCI SDK version in libs.versions.toml file")
    }

    // Make sure that both the repository and dependency contain the same artifacts by taking an intersection
    def commonOciArtifacts = ociProjectArtifacts.intersect(ociArtifacts)
    extraPropertiesExtension.set('ociArtifacts', commonOciArtifacts)
    extraPropertiesExtension.set('ociVersion', ociVersion)
}

if (!extraPropertiesExtension.has('ociSdkClientClasses')) {
    extraPropertiesExtension.set('ociSdkClientClasses', parseOciSdkClientClassNames().join(","))
}


